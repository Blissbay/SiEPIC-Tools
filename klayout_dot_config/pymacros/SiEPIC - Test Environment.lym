<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import SiEPIC, pya

'''
#################################################################################

This file is useful to use when debugging code. Breakpoints do not get registered
from within the module. To test code, define it in this file and import all modules 
explicitly. The changes will persist as modules are Singleton-like (only imported once).

Run to redefine functions/class methods

#################################################################################

Example 1:

def arc_test():
  return [pya.Point(0,0)]

from SiEPIC import utils
utils.arc = arc_test

*run macro*
*continue using Klayout as normal*

#################################################F################################
'''

if 1:
    import sys
    print (sys.version[0])
    if int(sys.version[0]) &gt; 2:
      from importlib import reload
    SiEPIC._globals = reload(SiEPIC._globals)
    SiEPIC = reload(SiEPIC)
    SiEPIC.extend = reload(SiEPIC.extend)
    SiEPIC.core = reload(SiEPIC.core)
    SiEPIC.install = reload(SiEPIC.install)
    SiEPIC.examples = reload(SiEPIC.examples)
    SiEPIC.github = reload(SiEPIC.github)
    SiEPIC.lumerical = reload(SiEPIC.lumerical)
    SiEPIC.lumerical.fdtd = reload(SiEPIC.lumerical.fdtd)
    SiEPIC.lumerical.mode = reload(SiEPIC.lumerical.mode)
    SiEPIC.lumerical.interconnect = reload(SiEPIC.lumerical.interconnect)
    SiEPIC.scripts = reload(SiEPIC.scripts)
    SiEPIC.install = reload(SiEPIC.install)
    SiEPIC.utils = reload(SiEPIC.utils)
    SiEPIC.utils.layout = reload(SiEPIC.utils.layout)
    SiEPIC.utils.geometry = reload(SiEPIC.utils.geometry)
    SiEPIC.utils.components = reload(SiEPIC.utils.components)
    # SiEPIC.utils.crossings = reload(SiEPIC.utils.crossings)
    SiEPIC.setup = reload(SiEPIC.setup)
    SiEPIC.verification = reload(SiEPIC.verification)
#    import SiEPIC.opics_netlist_sim
#    SiEPIC.opics_netlist_sim = reload(SiEPIC.opics_netlist_sim)
#    import SiEPIC.opics
#    SiEPIC.opics.utils = reload(SiEPIC.opics.utils)
#    SiEPIC.opics.network = reload(SiEPIC.opics.network)
#    SiEPIC.opics.components = reload(SiEPIC.opics.components)
    #SiEPIC.netlist = reload(SiEPIC.netlist)
    import SiEPIC.simulation.contraDC.contra_directional_coupler
    import SiEPIC.simulation.contraDC.contra_directional_coupler.ContraDC
    SiEPIC.simulation = reload(SiEPIC.simulation)
    SiEPIC.simulation.contraDC = reload(SiEPIC.simulation.contraDC)
    SiEPIC.simulation.contraDC.contra_directional_coupler = reload(SiEPIC.simulation.contraDC.contra_directional_coupler)
#    SiEPIC.simulation.contraDC.contra_directional_coupler.ContraDC = reload(SiEPIC.simulation.contraDC.contra_directional_coupler.ContraDC)
#    SiEPIC.simulation.contraDC.contraDC_gui = reload(SiEPIC.simulation.contraDC.contraDC_gui)
    print('Reloaded SiEPIC')


print ("*** SiEPIC test environment ***")

# find pins from a component
if 0:
    from SiEPIC.utils import get_layout_variables, load_Waveguides_by_Tech
    TECHNOLOGY, lv, layout, cell = get_layout_variables()
    taper = layout.create_cell('taper_si_simm_1550','SiEPIC_AMF_Beta')
    tech_name = 'AMF'
    waveguide_types = load_Waveguides_by_Tech(tech_name)

# Find # of waveguides and components
if 0:
    from SiEPIC import scripts  
    from SiEPIC.utils import get_layout_variables
    TECHNOLOGY, lv, ly, cell = get_layout_variables()
    nets, components = cell.identify_nets(verbose=False)

    # find all the waveguides
    waveguides = [c for c in components if 'Waveguide' in c.instance]
    print ('Total number of components: %s. Number of Waveguides: %s and Components: %s' % (len(components), len(waveguides), len(components)- len(waveguides) ) )
    

# pointlist_to_turtles
if 0:
    pointlist=[[230.175,169.18],[267.0,169.18],[267.0,252.0],[133.0,252.0],[133.0,221.82],[140.175,221.82]]
    pointlist=[[-4.80000,-50.00000],[-9.80000, -50.00000],[-9.80000,-80.00000],[44.80000,-80.00000],[44.80000,0.00000],[29.80000,0.00000],[29.80000,-10.00000],[39.80000,-10.00000],[39.80000,-20.00000],[34.80000,-20.00000]]
    from SiEPIC.scripts import pointlist_to_turtles
    tA, tB =pointlist_to_turtles(pointlist)  
    print('TurtleA: %s, TurtleB: %s'%(tA, tB) )

# Find waveguides
if 0:
    from SiEPIC import scripts  
    from SiEPIC.utils import get_layout_variables
    TECHNOLOGY, lv, ly, cell = get_layout_variables()
    nets, components = cell.identify_nets(verbose=False)
#  print ("* Display list of components:" )
#  [c.display() for c in components]
#  print ("* Display list of nets:" )
#  [n.display() for n in nets]

    # find all the waveguides
    waveguides = [c for c in components if 'Waveguide' in c.instance]
    for w in waveguides:
        # go through both pins, and find the corresponding component
        for p in w.pins:
#            p.display()
#            p.component.display()
            # find the connected components' pin, using the net
            p1 = [p1 for p1 in p.net.pins if p1 != p][0]
            p1.display()
            p1.component.display()
            
#            for p1 in p.component.pins:
#                p1.net.display()
#            for p2 in p1.net.pins:
#              if not('Waveguide' in p2.component.instance):
#                print('Component: %s' % p2.component.instance)
#                instances.append(p2.component.instance)
              


# Find waveguides from Nets
if 0:
    from SiEPIC import scripts  
    from SiEPIC.utils import get_layout_variables
    TECHNOLOGY, lv, ly, cell = get_layout_variables()
    nets, components = cell.identify_nets(verbose=False)
#  print ("* Display list of components:" )
#  [c.display() for c in components]
#  print ("* Display list of nets:" )
#  [n.display() for n in nets]

    waveguides=[]
    for n in nets:
        instances=[]
        pins=[]
        if [p.center.to_s() for p in n.pins if ('Waveguide' in p.component.instance and not(p.component in waveguides))]:
        # Found a waveguide. Next find the two components
            waveguides.append(p.component)
            for p in n.pins:
                if 'Waveguide' in p.component.instance:
                    print('Waveguide: %s' % p.center.to_s())
                    for p1 in p.component.pins:
                        p1.net.display()
                    for p2 in p1.net.pins:
                        if not('Waveguide' in p2.component.instance):
                            print('Component: %s' % p2.component.instance)
                            instances.append(p2.component.instance)
                            pins.append(p2)
    print(instances)
    print(pins)
              
        
#    print(n.pins[0].component.instance)
#    print(n.pins[1].component.instance)


if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  
  tech_name = TECHNOLOGY['technology_name']
  # print(ly.technology_name)
  

  from SiEPIC.utils import get_library_names
  get_library_names(tech_name, verbose=True)
  
if 0:   # in KLayout 0.27
  libs = pya.Library.library_ids()
  for lib in libs:
    l = pya.Library.library_by_id(lib)
    print("%s: %s" % (lib,l))
  

if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  # Waveguide type:
  from SiEPIC.utils import load_Waveguides_by_Tech
  technology = ly.meta_info_value('technology')
  technology = get_technology_by_name('AIMPhotonics_PDK')['technology_name']
  print(technology)
  waveguides = load_Waveguides_by_Tech(technology, debug=True)
  print(waveguides)


# connect_pins_with_waveguide test, using "EBeam" PDK:
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  if TECHNOLOGY['technology_name'] not in 'EBeam':
    raise Exception ('This example needs to be executed in a layout with Technology = EBeam')

  from SiEPIC.scripts import connect_pins_with_waveguide
  waveguide_type='Strip TE 1550 nm, w=500 nm'
  '''
  #wg_types.append ( WaveguideTypes(name='Donald', w=500) )
  # Load localized WAVEGUIDES.XML
  Project folder, including
   - GDS, OASIS
   - WAVEGUIDES.XML
   - Local library, *.py
  '''
  
  # clean all cells within the present cell
  top_cell = ly.top_cells()[0]
  ly.prune_subcells(top_cell.cell_index(), 10)

  cell_ebeam_crossing4 = ly.create_cell('ebeam_crossing4', 'EBeam')
  t = pya.Trans.from_s('r270 0,0')
  instA = cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  t = pya.Trans.from_s('r270 30000,20000')
  instB = cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  connect_pins_with_waveguide(instA, 'opt3', instB, 'opt3', turtle_A=[5,-90,10,-90, 20, 90], waveguide_type=waveguide_type)
  connect_pins_with_waveguide(instA, 'opt2', instB, 'opt4', waveguide_type=waveguide_type)

  t = pya.Trans.from_s('r270 0,-50000')
  instA = cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  t = pya.Trans.from_s('r270 10000,-50000')
  instB = cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  connect_pins_with_waveguide(instA, 'opt2', instB, 'opt3', waveguide_type=waveguide_type, verbose=True)
  connect_pins_with_waveguide(instA, 'opt4', instB, 'opt4', waveguide_type=waveguide_type)
  connect_pins_with_waveguide(instA, 'opt3', instB, 'opt2', turtle_A=[5,90, 30, 90], turtle_B=[5, 90, 10, 90, 10, -90, 10, -90,  15, -90, 50, -90], waveguide_type=waveguide_type, verbose=True, debug_path=True)

 
# connect_pins_with_waveguide test, using "EBeam" PDK:
# hierarchy with 1 parent
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  if TECHNOLOGY['technology_name'] not in 'EBeam':
    raise Exception ('This example needs to be executed in a layout with Technology = EBeam')

  from SiEPIC.scripts import connect_pins_with_waveguide
  waveguide_type='Strip TE 1550 nm, w=500 nm'
    
  # clean all cells within the present cell
  top_cell = ly.top_cells()[0]
  ly.prune_subcells(top_cell.cell_index(), 10)

  cell_ebeam_crossing4 = ly.create_cell('ebeam_crossing4', 'EBeam')
  t = pya.Trans.from_s('r270 0,0')
  instA = cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
 
  test_cell = cell.layout().create_cell("test_cell")
  t = Trans(pya.Trans.R0, 5000+4800, 5000+4800)
  t = Trans(pya.Trans.R0, 10000, 0)
  cell.insert(CellInstArray(test_cell.cell_index(), t))
  t = Trans(pya.Trans.R0, 0, 0)
  instC = test_cell.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  connect_pins_with_waveguide(instC, 'opt3', instA, 'opt4', waveguide_type=waveguide_type, verbose=True)

  test_cell2 = cell.layout().create_cell("test_cell2")
  t = Trans(pya.Trans.R0, 60000, 51000)
  cell.insert(CellInstArray(test_cell2.cell_index(), t))
  '''
  # if you instantiate the cell more than once, the connect_pins_with_waveguide should return an error.
  t = Trans(pya.Trans.R0, 60000, 150000)
  cell.insert(CellInstArray(test_cell2.cell_index(), t))
  '''
  t = Trans(pya.Trans.R90, 0, 0)
  instD = test_cell2.insert(pya.CellInstArray(cell_ebeam_crossing4.cell_index(), t))
  connect_pins_with_waveguide(instC, 'opt4', instD, 'opt3', waveguide_type=waveguide_type, verbose=False)


# connect_cell tests
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  if TECHNOLOGY['technology_name'] not in 'EBeam':
    raise Exception ('This example needs to be executed in a layout with Technology = EBeam')

  from SiEPIC.scripts import connect_pins_with_waveguide
  waveguide_type='Strip TE 1550 nm, w=500 nm'
    
  # clean all cells within the present cell
  top_cell = ly.top_cells()[0]
  ly.prune_subcells(top_cell.cell_index(), 10)

  cell_ebeam = ly.create_cell('ebeam_dc_halfring_arc', 'EBeam_Beta', {})

  t = pya.Trans.from_s('r270 0,0')
  instA = cell.insert(pya.CellInstArray(cell_ebeam.cell_index(), t))
  instB = scripts.connect_cell(instA, 'pin3', cell_ebeam, 'pin3', translation=Trans(Trans.R90, 2000, 1000), verbose=True) 
 
  t = pya.Trans.from_s('r270 30000,30000')
  instA = cell.insert(pya.CellInstArray(cell_ebeam.cell_index(), t))
  instB = scripts.connect_cell(instA, 'pin3', cell_ebeam, 'pin3', translation=Trans(Trans.R180, 2000, 1000), verbose=True) 

  t = pya.Trans.from_s('r270 -30000,30000')
  instA = cell.insert(pya.CellInstArray(cell_ebeam.cell_index(), t))
  instB = scripts.connect_cell(instA, 'pin3', cell_ebeam, 'pin3', translation=Trans(Trans.R270, 2000, 1000), verbose=True) 

  t = pya.Trans.from_s('r270 30000,-30000')
  instA = cell.insert(pya.CellInstArray(cell_ebeam.cell_index(), t))
  instB = scripts.connect_cell(instA, 'pin3', cell_ebeam, 'pin3', translation=Trans(Trans.R0, 2000, 1000), verbose=True) 


if 0:
  from SiEPIC.utils import find_siepictools_debug_text
  print(find_siepictools_debug_text())

if 0:
  import SiEPIC.github as github
  github.github_check_SiEPICTools_version()

if 0:
  from SiEPIC import _globals
  print("lumapi: %s" % _globals.LUMAPI)


if 0:
  import SiEPIC.lumerical as lumerical
  lumerical.interconnect.run_INTC(verbose=False)
  # lumerical.interconnect.circuit_simulation(verbose=True, opt_in_selection_text=[])
  #lumerical.interconnect.circuit_simulation_monte_carlo(verbose=True)

if 0:
  import SiEPIC.lumerical as lumerical
#  lumerical.fdtd.run_FDTD(verbose=True)
  lumerical.fdtd.generate_component_sparam(verbose=True, do_simulation=True, addto_CML=True)

if 0:
  verbose = True
  # Get technology and layout details
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()  
  dbum = TECHNOLOGY['dbu']*1e-6 # dbu to m conversion

  # get selected instances; only one
  from SiEPIC.utils import select_instances
  selected_instances = select_instances()
  error = pya.QMessageBox()
  error.setStandardButtons(pya.QMessageBox.Ok )
  if len(selected_instances) != 1:
    error.setText("Error: Need to have one component selected.")
#    return
  
  # get selected component
  if verbose:
    print(" selected component: %s" % selected_instances[0].inst().cell )
  component = cell.find_components(cell_selected=[selected_instances[0].inst().cell])[0]

  # get polygons from component
  polygons = component.get_polygons()

  x,y = component.polygon.bbox().center().x, component.polygon.bbox().center().y
  width,height = component.polygon.bbox().width(), component.polygon.bbox().height()
  scale = max(width,height)/0.64
  s1,s2 = (64,68*height/width) if width &gt; height else (68*width/height,64)
  
  polygons_vertices = [[[round((vertex.x-x)*100./scale,2)+s1/2, round((y-vertex.y)*100./scale,2)+s2/2+2] for vertex in p.each_point()] for p in [p.to_simple_polygon() for p in polygons] ]
  if len(polygons_vertices) &lt; 1:
    error.setText("Error: Component needs to have polygons.")
#    return
  
  import svgwrite
  dwg = svgwrite.Drawing('/tmp/test.svg', size=(str(s1)+'%', str(s2)+'%'))
  c=bytearray.fromhex(hex(TECHNOLOGY['Waveguide_color'])[4:-1])
  color = svgwrite.rgb(c[0], c[1], c[2], 'RGB')
  for i in range(0,len(polygons_vertices)):
    print ('polygon: %s' %polygons_vertices[i])
    p = dwg.add (dwg.polyline(polygons_vertices[i], fill=color,debug=True))  # stroke=color
    
  dwg.save()



if 0:
  import SiEPIC.lumerical.lumapi_fdtd as lumapi
  from SiEPIC import _globals
  lumapi.putMatrix(_globals.FDTD, 'test', [[1,2],[2,6]])

if 0:
  import numpy as np
  # remove the wavelength from the array, 
  # leaving two dimensions, and 3 field components
  Efield_xyz = np.array(E[0,:,:,5,:])
  # find the field intensity (|Ex|^2 + |Ey|^2 + |Ez|^2)
  Efield_intensity = np.empty([Efield_xyz.shape[0],Efield_xyz.shape[1]])
  print(Efield_xyz.shape)
  for a in range(0,Efield_xyz.shape[0]):
    for b in range(0,Efield_xyz.shape[1]):
      Efield_intensity[a,b] = abs(Efield_xyz[a,b,0])**2+abs(Efield_xyz[a,b,1])**2+abs(Efield_xyz[a,b,2])**2
  # find the max field for each z slice (b is the z axis)
  Efield_intensity_b = np.empty([Efield_xyz.shape[1]])
  for b in range(0,Efield_xyz.shape[1]):
    Efield_intensity_b[b] = max(Efield_intensity[:,b])
  # 
  indexes = np.argwhere ( Efield_intensity_b &gt; 1e-6 )
  min_index, max_index = int(min(indexes)), int(max(indexes))
  
    
if 0: 
  import SiEPIC.utils
  DFT = SiEPIC.utils.load_DFT()
  print(DFT)

if 0:

#  filepath = "C:/Users/lukasc2/KLayout/tech/EBeam/libraries/klayout_Layers_EBeam.lyp"
  filepath = "/Users/lukasc/SiEPIC_EBeam_PDK/klayout_dot_config/tech/EBeam/libraries/klayout_Layers_EBeam.lyp"



# test for finding Component based on selected object.
if 0:
  from SiEPIC.utils import select_instances
  selected_instances = select_instances()
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  for obj in selected_instances:
    print("  selected component: %s" % obj.inst().cell )
    c = cell.find_components(cell_selected=[obj.inst().cell],verbose=True)
    print (c[0].component)
    pass
  
if 0:
  import sys
#  sys.path.append('C:\\Users\\lukasc2\\AppData\\Roaming\\KLayout\\lib\\python3.5\\DLLs')
  sys.path.append('C:\\Program Files\\Anaconda3\\DLLs')
  sys.path.append('C:\\Program Files\\Anaconda3')
  sys.path.append('C:\\Program Files\\Anaconda3\\python35.zip')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.4.6-py3.5.egg')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin')
  sys.path.append('C:\\Program Files\\Anaconda3\\lib\\site-packages\\setuptools-27.2.0-py3.5.egg')
  from xml.etree import cElementTree as ET
  e = ET.XML("")
  import pyexpat

if 0:
  from xml.etree import cElementTree as ET
  e = ET.XML("&lt;message&gt;&lt;content&gt;hello&lt;/content&gt;&lt;/message&gt;")
  print(e.getchildren()[0].text)

if 0:
  filepath = "C:/Users/lukasc2/KLayout/tech/EBeam/libraries/klayout_Layers_EBeam.lyp"
#  file=open(filepath,'r')
#  a=file.read()
#  file.close()
  qfile = QFile(filepath)
  source=QXmlInputSource(qfile)
  handler=QXmlContentHandler()
  error_handler = QXmlErrorHandler()
#  source.data = a
#  reader = QXmlReader()  # error: Abstract method called...
  reader = QXmlSimpleReader()
  reader.setContentHandler(handler)
  reader.setErrorHandler(error_handler)
  reader.parse(source)
  # Error: Ambiguous overload variants - multiple method declarations match arguments in QXmlSimpleReader.parse

if 0:
  import SiEPIC.utils
  DFT=SiEPIC.utils.load_DFT()
  print(DFT)

if 0:
  import SiEPIC.lumerical as lumerical
  lumerical.interconnect.component_simulation(verbose=True)

if 0:
  import SiEPIC.lumerical as lumerical
  lumerical.interconnect.circuit_simulation(verbose=True)
  
  
# Components
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  nets, components = cell.identify_nets(verbose=False)
  print ("* Display list of components:" )
  [c.display() for c in components]
  print ("* Display list of nets:" )
  [n.display() for n in nets]

# Component connections
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  # clean all cells within the present cell
  top_cell = ly.top_cells()[0]
  ly.prune_subcells(top_cell.cell_index(), 10)

  cell_amf_Terminator_TE_1550 = ly.create_cell('ebeam_crossing4', 'EBeam')
  t = pya.Trans.from_s('r270 230175,190500')
  inst_amf_Terminator_TE_1550_3 = cell.insert(pya.CellInstArray(cell_amf_Terminator_TE_1550.cell_index(), t))

  cell_AMF_IRPH_MRR_0 = ly.create_cell('ebeam_bragg_te1550', 'EBeam',
       {'r': 10.0, 'w': 0.35, 'g': 0.12, 'gmon': 0.5})

  from SiEPIC.scripts import connect_cell
  
  connect_cell(inst_amf_Terminator_TE_1550_3, 'opt2', cell_AMF_IRPH_MRR_0, 'pin1')


# Nets, Net trimming:
if 0:
  from SiEPIC import scripts  
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  nets, components = cell.identify_nets(verbose=True)
  print ("* Display list of components:" )
  [c.display() for c in components]
  print ("* Display list of nets:" )
  [n.display() for n in nets]
  selected_component = components[0]
  nets, components = scripts.trim_netlist (nets, components, selected_component)
  print ("* Display list of components:" )
  [c.display() for c in components]
  print ("* Display list of nets:" )
  [n.display() for n in nets]

# Verification
if 0:
  from SiEPIC import scripts  
  
  scripts.layout_check(verbose=True)


if 0:
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  print ("* find_components():" )
  components = cell.find_components (verbose=True)
  print ("* Display list of components:" )
  [c.display() for c in components]


if 0:
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  from SiEPIC import utils
  text_out, texts = utils.find_automated_measurement_labels(cell)
  print(text_out)
  print(texts)

  
if 0:
  import os, fnmatch
  dir_path = pya.Application.instance().application_data_path()
  tech_name = 'GSiP'
  matches = []
  for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
      for filename in fnmatch.filter(filenames, '*' + tech_name + '.lyp'):
          matches.append(os.path.join(root, filename))
  print(matches)
  

if 0:
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  #pins = cell.find_pins()
  #print (pins)

  if 1:
    print ("* find_components():" )
    components = cell.find_components (verbose=True)
    print ("* Display list of components:" )
    [c.display() for c in components]

  if 1:
    print ("* identify_nets():" )
    nets, components = cell.identify_nets (verbose=True)
    print ("* Display list of components:" )
    [c.display() for c in components]
    print ("* Display list of nets:" )
    [n.display() for n in nets]

  if 0:
    text_subckt, text_main, detector_nets = cell.spice_netlist_export(verbose=True)
    print(text_main)
    print(text_subckt)

  
  #from SiEPIC.core import WaveguideGUI, MonteCarloGUI, CalibreGUI, Net, Component
  #from SiEPIC import _globals
  #from SiEPIC.netlist import find_all_components


# bug in KLayout 0.25  
if 0:  
    lv = pya.Application.instance().main_window().current_view()
    ly = lv.active_cellview().layout() 
    cell = lv.active_cellview().cell
    
    LayerN=ly.layer(pya.LayerInfo('Text'))
    pya.Trans(pya.Trans.R0,10000,10000)
    pya.Trans(10000,10000)
#    cell.shapes(LayerN).insert(pya.Text ("elec1a", pya.Trans(10000,10000)))
    cell.shapes(LayerN).insert(pya.Text ("elec1a", pya.Trans(pya.Trans.R0,10000,10000)))


# Verification tests:

# test Component.has_compactmodel()
if 0:
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  if 0:
    print ("* find_components():" )
    components = cell.find_components ()
    print ("* Display list of components:" )
    [c.display() for c in components]
  if 0:
    text_subckt, text_main, detector_nets = cell.spice_netlist_export(verbose=True)
    print(text_main)
    print(text_subckt)
  if 1:
    print ("* find_components()" )
    components = cell.find_components ()
    print ("* Display list of components" )

    if not all([c.has_model() for c in components]):
      # missing models, find which one
      components_havemodels = [[c.has_model(), c.component, c.instance] for c in components]
      missing_models = []
      for c in components_havemodels:
        if c[0] == False:
          missing_models.append([c[1],c[2]])
      missing = ("We have %s component(s) missing models, as follows: %s" % (len(missing_models), missing_models))
      v = pya.MessageBox.warning("Errors", missing, pya.MessageBox.Ok)
   
if 0:
  import SiEPIC.github
  files = SiEPIC.github.github_get_filenames(user='lukasc-ubc', repo='edX-Phot1x', filesearch='PCM')
  print(files)
  SiEPIC.github.github_get_files(user='lukasc-ubc', repo='edX-Phot1x', filesearch='PCM', save_folder='/tmp/t')
    
if 0:
  from SiEPIC.utils import find_automated_measurement_labels
  text_out, opt_in = find_automated_measurement_labels()
  print(text_out)
  print(opt_in)
      
if 0:
  from SiEPIC.scripts import fetch_measurement_data_from_github
  savefilepath = fetch_measurement_data_from_github (verbose=True)
#  savefilepath = fetch_all_measurement_data_from_github(verbose=True)
if 0:
  import SiEPIC.github
#  files = SiEPIC.github.github_get_filenames(user='lukasc-ubc', repo='edX-Phot1x', filesearch='2017T3/ANT_chip/TM%2020%20deg%20C/05_Dec_2017_20_17_27/TMAlign_FarmMiddle_1.mat')
#  files = SiEPIC.github.github_get_filenames(user='lukasc-ubc', repo='edX-Phot1x', filesearch='TMAlign_FarmMiddle_1.mat')
  SiEPIC.github.github_get_file(user='lukasc-ubc', repo='edX-Phot1x', filepath_search='2017T3/ANT_chip/TM%2020%20deg%20C/05_Dec_2017_20_17_27/TMAlign_FarmMiddle_1.mat', filename_search='TMAlign_FarmMiddle_1.mat', save_folder='/tmp/t')
  
if 0:
  import time
  
  from scipy.io import loadmat        # used to load MATLAB data files
  
  import matplotlib
  import matplotlib.pyplot as plt     # used to plot data
  plt.ioff()
  import os                           # used to process filenames
  
  FileName = '/tmp/t/TMAlign_FarmMiddle_1.mat'
  
  PORT=1 # Which Fibre array port is the output connected to?
  # Load the file, from the MATLAB format.
  matData = loadmat(FileName, squeeze_me=True, struct_as_record=False)
  
  # Read the experimental data from the MATLAB file
  #wavelength = matData['scanResults'][PORT-1].Data[:,0]/1e9
  wavelength = matData['scandata'].wavelength/1e9
  power = matData['scandata'].power[:,PORT-1]
  
  # Plot the raw data:
  fig=plt.figure()
  print(time.clock())
  plt.plot(wavelength*1e6, power)
  plt.xlabel('Wavelength [$\mu$m]')
  plt.ylabel('Transmission [dB]')
  plt.autoscale(enable=True, axis='x', tight=True)
  plt.autoscale(enable=True, axis='y', tight=True)
  print(time.clock())
  saveFigFileName = os.path.splitext(FileName)[0]+'.pdf'
  plt.title('Raw spectrum data: %s'%(saveFigFileName))
  plt.savefig(saveFigFileName)
  print(time.clock())
  saveFigFileName = os.path.splitext(FileName)[0]+'.png'
  plt.title('Raw spectrum data: %s'%(saveFigFileName))
  plt.savefig(saveFigFileName)
  print(time.clock())

</text>
</klayout-macro>
